package user;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import dao.DatabaseQueries;
import dto.Employee;
import util.Utility;

/**
 * Servlet implementation class ValidateAdmin
 */
@WebServlet("/ValidateAdmin")
public class ValidateAdmin extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter printWriter = response.getWriter();
		String userName = request.getParameter("userName");
		String password = request.getParameter("password");
		request.setAttribute("valueOfUserName", userName);
		request.setAttribute("valueOfPassword", password);
		boolean flag = true;
		if (userName.isEmpty()) {
			request.setAttribute("errorInUserName", "Required");
			flag = false;
		} else {
			if (userName.equals("raghav@12")) {
				request.setAttribute("errorInUserName", null);
			} else {
				request.setAttribute("errorInFirstName", "Please enter only characters");
				flag = false;
			}
		}

		if (lname.isEmpty()) {
			request.setAttribute("errorInLastName", "Required");
			flag = false;
		} else {
			if (utility.validateStrings(lname, regxForName)) {
				request.setAttribute("errorInLastName", null);
			} else {
				request.setAttribute("errorInLastName", "Please enter only characters");
				flag = false;
			}
		}

		
		if (flag) {
			Employee employee = new Employee();
			if(url.equals("AddNewEmployee")) {
				id = UUID.randomUUID().toString();
			}
			employee.setUid(id);
			employee.setFname(fname);
			employee.setLname(lname);
			employee.setMobileNumber(mobileNumber);
			employee.setEmail(email);
			employee.setDateOfJoining(dateOfJoining);
			employee.setSalary(salary);
			@SuppressWarnings("unchecked")
			DatabaseQueries<Employee> databaseQueries = (DatabaseQueries<Employee>)DatabaseQueries.getObject();
			if(url.equals("AddNewEmployee")) {
				if (databaseQueries.addData(employee.getDataOfEmployee(employee), employee)) {
					request.getRequestDispatcher("ReadEmployees").forward(request, response);
				} else {
					printWriter.print("record not saved");
				}
			}else {
						if (databaseQueries.updateData(id, employee.getDataOfEmployee(employee), employee) > 0) {
							printWriter.print("data entered successfully");
							request.getRequestDispatcher("ReadEmployees").forward(request, response);
						} else {
							printWriter.print("record not saved");
						}
			}
		} else {
			if(url.equals("AddNewEmployee")) {
				request.getRequestDispatcher(url).forward(request, response);
			}else {
				request.getRequestDispatcher(url).forward(request, response);	
			}
		}
	}

}
